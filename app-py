from flask import Flask, render_template, request, redirect, url_for, flash 
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, login_user, logout_user, login_required, UserMixin, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import os

# Inicializar Flask
app = Flask(__name__)
app.config['SECRET_KEY'] = 'clave-secreta'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///usuarios.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Inicializar SQLAlchemy
db = SQLAlchemy(app)

# Modelo de Usuario
class Usuario(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)

class Factura(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nombre_archivo = db.Column(db.String(200), nullable=False)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)

# Crear base de datos si no existe
with app.app_context():
    if not os.path.exists('usuarios.db'):
        db.create_all()
        print("✅ Base de datos creada correctamente")

# Inicializar LoginManager
login_manager = LoginManager()
login_manager.login_view = 'login'
login_manager.init_app(app)

# Cargar usuario por ID
@login_manager.user_loader
def load_user(user_id):
    return Usuario.query.get(int(user_id))

# Ruta principal
@app.route('/')
def index():
    return render_template('index.html')

# Ruta de registro
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        
        # Verificar si el correo ya existe
        if Usuario.query.filter_by(email=email).first():
            flash('Este correo ya está registrado.', 'warning')
            return redirect(url_for('register'))
        
        # Crear nuevo usuario con contraseña hasheada (CORREGIDO)
        hashed_pw = generate_password_hash(password, method='pbkdf2:sha256')
        nuevo_usuario = Usuario(email=email, password=hashed_pw)
        db.session.add(nuevo_usuario)
        db.session.commit()
        flash('Usuario registrado con éxito.', 'success')
        return redirect(url_for('login'))
    
    return render_template('register.html')

# Ruta de login
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        usuario = Usuario.query.filter_by(email=email).first()
        if usuario and check_password_hash(usuario.password, password):
            login_user(usuario)
            return redirect(url_for('dashboard'))
        else:
            flash('Credenciales incorrectas.', 'danger')
    return render_template('login.html')

# Ruta de logout
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))

# Ruta protegida
@app.route('/dashboard')
@login_required
def dashboard():
    return render_template('dashboard.html', usuario=current_user)

# Ejecutar aplicación
if __name__ == '__main__':
    app.run(debug=True)

@app.route('/subir-factura', methods=['GET', 'POST'])
@login_required
def subir_factura():
    if request.method == 'POST':
        archivo = request.files['factura']
        if archivo.filename.endswith('.pdf'):
            filename = f"{current_user.id}_{archivo.filename}"
            ruta = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            archivo.save(ruta)

            nueva_factura = Factura(nombre_archivo=filename, usuario_id=current_user.id)
            db.session.add(nueva_factura)
            db.session.commit()
            flash('Factura subida correctamente.', 'success')
            return redirect(url_for('dashboard'))
        else:
            flash('Solo se permiten archivos PDF.', 'danger')
    
    return render_template('upload.html')
